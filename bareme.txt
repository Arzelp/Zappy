0) Preliminaire
Preliminaire :
- Absent/pas venu a la soutenance/en retard -> -21
- Tricheur (en parler au prof avant) -> -42
- Voleur de code (en parler au prof avant) -> -84
- Pas de carte d'etudiant -> 0.5
- Pas de fichier auteur (si demande) => 0.5
- Rien a rendre => 0.5
- Ebauche de code => 1 (niveau my_irc aka serveur qui accept et ecrit un peu sur la socket)
- complet mais non fonctionnel (segfault ou ne compile pas sur aucune des parties) => 1.5

Norme (-10, -5, -4, -3, -2, -1, 0)

1) Pitch
Support de présentation :
Le groupe fourni un suppot de présentation.
- Non : 0
- Oui mais pas d'effort : 0.5
- Oui : 1
- Oui et excellent : 2

Préparation du déroulé :
Le discours du groupe est préparé, il sait de quoi parler, la répartition du temps de parole est équitable et/ou logique
- Non : 0
- Oui : 1
- Oui et c'est fluide et précis : 2

Structuration du pitch :
Le groupe expose une structure claire :
*mise en perspective du projet
*approche du projet
*déroulé du développement
*feedback sur les problemes rencontrés
*ouverture sur les améliorations pour la suite
- Non, c'est désordonné ou de nombreux éléments sont absent : 0
- Oui, c'est assez structuré mais des éléments importants sont absents : 1
- Oui, c'est structuré et l'étudiant a une analyse objective de son projet : 2

Maitrise technique :
Le groupe maitrise clairement les éléments techniques et sait donc de quoi il parle. Ne pas hésiter à poser des questions pour cela.
- Non, les termes techniques sont utilisés à tort et à travers : 0
- Oui, globalement correct : 1
- Oui, il y a une vraie maitrise du contexte technique et l'étudiant connait les tenants et les aboutissants des éléments techniques du projet : 2

Exemples / Illustrations :
Le groupe expose sa démarche et/ou son algorithme au travers de schémas, illustrations, ...
- Non, cela ne reste que de l'oral et est donc peu compréhensible : 0
- Oui, mais il y en a soit trop (ce qui noie l'information) ou pas assez (ce qui n'aide pas plus que ca), ou ils ne sont pas suffisamment exploités dans la présentation : 1
- Oui, le dosage est bon, on comprend parfaitement ce qui a été fait, comment et pourquoi : 2

2) Serveur : réseau (-1, 0, 1, 2, 3, 4, 5)
Le serveur Zappy est un serveur qui offre un service, cela signifie que les fonctions du type \"x*\" (comme xmalloc), sont déconseillées dans ce projet.
Il convient de vérifier chaque retour des appels systèmes afin de gérer les cas suivants:
1) Si échec lors de l'initialisation du serveur, on peut quitter celui-ci, les ressources systèmes n'étant pas suffisantes pour le lancer.
2) Si l'échec d'un appel système entraine une erreur de type EINTR, le serveur se doit de relancer l'appel car ce n'est pas une erreur critique.
3) Dans les autres cas, un échec d'un appel système pourra amener a la déconnexion du client concerne par cet appel, mais en aucun cas a la déconnexion de tous les clients.
D'une manière générale, lorsque le service est démarré, il prime sur tout le reste. Tant que le serveur peut assurer son service a au moins 1 client (dans le cas du Zappy), il ne doit jamais se terminer.
Nous n'évaluons pas ici l'utilisation des appels socket/bind/listen/accept car cela est obligatoire pour obtenir autre chose qu'une ébauche de code. Si mauvaise utilisation des éléments précités, le projet n'est donc qu'une ébauche de code.
Eliminatoire sur le serveur :
- Si pas d'utilisation de select -> 0
- Le serveur ne doit avoir aucune limitation arbitraire (autre que les limitations du système) ex : nb de client max, nb de team max -> 0 si limitation arbitraire (perte de fonctionnalité du serveur)
- Si utilisation de thread (autre que pour le thread de GUI dans le cas ou il est embedded dans le serveur) -> -42, c'est explicitement interdit par le sujet
Notation :
- Mauvaise utilisation de select (monitoring en écriture d'une socket inutile) -> -1pt
- Séparation réseau / jeu (bonne gestion des buffers et concaténation / séparation des commandes). ex : \"vo^Dirn\" ou \"voirnava^Dncen\" (utilisez netcat pour tester) -> 3pts
- Résiste a la montée en charge et tests de moulinette -> 2pts (option -b, -s et -g -> préparez vous un gros fichier de commandes, avec potentiellement des très gros broadcast)
- tester sans retour chariot (0 si segfault, couper au bout de 30 secondes) yes | tr -d \"n\"| nc IP PORT

3) Serveur : fonctionnel (0, 1, 2, 3, 4, 5, 6, 7)
Bonne gestion du temps en utilisant le timeout du select (et bon calcul de ce timeout en fonction du temps écoulé entre la sortie du select précédent et l'entrée dans le prochain, ET de la prochaine commande a exécuter) -> 1pt
- Gestion intelligente des commandes (ex : Liste d'actions globale avec un tri par insertion pour que les actions ayant un temps le plus court soit au début de la liste) -> 1pt
- Implémentation du protocole (-1pt par commande manquante ou mal implémentée ... pas en dessous de 0/5) -> 5pt

4) Client Graphique (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
On évalue ici l'aspect fonctionnel du client. Si sur un des tests, le client quitte proprement, on notera non fonctionnel ce test, mais pas le fonctionnement global du client.
- Le client se connecte au serveur et affiche la map -> 1pt
- Les joueurs, les pierres et la nourriture sont présents -> 1pt
- Il y a une distinction du nombre de pierres identiques sur une case (1 ou 2 linemates par exemple) -> 1pt
- On peut faire défiler la map (scrolling) -> 1pt
- On peut cliquer sur une case afin de voir le détail de celle-ci dans une fenetre flottante/infobulle/autre... -> 1pt
- On peut cliquer sur un joueur afin de voir ses statistiques dans une fenetre flottante / infobulle... -> 1pt
- On peut verrouiller le focus (avec déplacement de camera/scrolling) sur un joueur et le suivre dans ses déplacements meme s'il se déplace dans la map. -> 1pt
- On peut voir la liste des teams, le détail de chaque team (nombre de joueurs, niveau de chacun, ...) ex : http:\/\/www.profytrolle.net\/images\/zappy\/zappy2_full.jpg -> 1pt
- Gestion visuelle du son (broadcast) -> 1pt

5) Client IA.
Note, sur 5 points, on évalue uniquement le cote fonctionnel ici :
- Reste niveau 1 ou 2 -> 0 point
- Monte au niveau 3 -> 1 point.
- Niveau 4/5 -> 2
- Niveau 6 -> 3 points
- Niveau 7 -> 4 points
- Niveau 8 -> 5 points.

6) Les Bonus (a partir de 15). (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
La liste des bonus n'est pas exhaustive, le souteneur est libre de récompenser d'autres initiatives qui apporte une plus-value au projet.
Bonus graphique :
- Gestion d'effets sonores du client graphique sur chaque action (pas que musique de fond par exemple) -> 1pt
- Les étudiants ont utilises une technos non abordée dans le cursus tech1-tech2, on les gratifie pour l'effort réalisé (Android, iOS, XNA, ...) ex : 1pt client Android/iPhone/PC .Net/PC Java, +2 client XNA compatible XBox, ...
- Client en \"belle\" 3D (il vaut mieux un jolie 2D fonctionnelle qu'une 3D moche et injouable), il faut gérer les collisions avec l'environnement (on ne passe pas sous le sol), on ne sort pas de la map, switch de camera en vue 1ere personne, vue de dessus, qui ne rame pas, gestion du clipping, LOD/dégradation des modeles 3D en sprite ... -> si il y a tout ca, ca vaut au moins +2pt
- Menu de configuration, possibilité de changer de serveur sans quitter, pourquoi pas lancer des IA depuis le client graphique, etc ...-> 1pt
Bonus IA :
- Visualisation de ce que sait l'IA (mix client graphique & IA)
- Synchronisation d'une map commune entre les IA
Bonus serveur :
- Administration en live du serveur :
* sur le shell de celui-ci -> 1
* sur une socket securisee SSL -> 2
* sur une socket simple -> 1
* avec authentification -> 1
* Resizing de la map avec replacement des joueurs s'ils sont hors-map -> 1
* Changement de l'echelle de temps -> 1
